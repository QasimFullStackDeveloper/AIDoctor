name: Deploy Frontend and Backend to Home Server

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # React Frontend Deployment
  deploy-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: AIDoctor.client
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: AIDoctor.client/package-lock.json

      - name: Install dependencies
        run: |
          rm -rf node_modules package-lock.json
          npm install

      - name: Build React App
        run: npm run build

      - name: Install rsync
        run: |
          sudo apt-get update
          sudo apt-get install -y rsync

      - name: Deploy Frontend to Home Server
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key
          chmod 600 private_key
          rsync -avz --delete -e "ssh -i private_key -o StrictHostKeyChecking=no" dist/ ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_HOST }}:/c/WebApps/AIDoctor/client/

  # Backend API Deployment
  deploy-backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: AIDoctor.Server
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Publish API
        run: dotnet publish -c Release -o publish --no-restore

      - name: Install rsync
        run: |
          sudo apt-get update
          sudo apt-get install -y rsync

      - name: Deploy Backend to Home Server
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key
          chmod 600 private_key
          rsync -avz --delete -e "ssh -i private_key -o StrictHostKeyChecking=no" publish/ ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_HOST }}:/c/WebApps/AIDoctor/server/
          ssh -i private_key -o StrictHostKeyChecking=no ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_HOST }} "if not exist \"C:\WebApps\AIDoctor\server\" mkdir \"C:\WebApps\AIDoctor\server\" & nssm stop AIDoctorServer & if errorlevel 1 (nssm install AIDoctorServer \"C:\Program Files\dotnet\dotnet.exe\" \"C:\WebApps\AIDoctor\server\AIDoctor.Server.dll\" & nssm set AIDoctorServer AppDirectory \"C:\WebApps\AIDoctor\server\") & nssm start AIDoctorServer"
