name: Deploying AI Doctor to RDP (VPS Own Server/Machine)

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Build Backend
        run: |
          cd AIDoctor.Server
          dotnet publish -c Release -o ../publish

      - name: Build Frontend
        run: |
          cd AIDoctor.Client
          npm install
          npm audit fix
          npm run build
          xcopy dist ..\publish\wwwroot /E /H /C /I /Y

      - name: Deploy to RDP
        timeout-minutes: 15
        env:
          ConnectionStrings__DefaultConnection: ${{ secrets.SQL_CONNECTION_STRING }}
        run: |
          $RdpHost = "139.185.55.205"
          $RdpPort = 5986
          $RdpUser = "Aaban"
          $RdpPass = "${{ secrets.RDP_PASSWORD }}"
          $SecurePass = ConvertTo-SecureString $RdpPass -AsPlainText -Force
          $Credential = New-Object System.Management.Automation.PSCredential($RdpUser, $SecurePass)

          # Add the RDP host to TrustedHosts
          $CurrentTrustedHosts = (Get-Item WSMan:\localhost\Client\TrustedHosts).Value
          if ($CurrentTrustedHosts -notlike "*$RdpHost*") {
            if ($CurrentTrustedHosts) {
              Set-Item WSMan:\localhost\Client\TrustedHosts -Value "$CurrentTrustedHosts,$RdpHost" -Force
            } else {
              Set-Item WSMan:\localhost\Client\TrustedHosts -Value $RdpHost -Force
            }
          }
          Set-Item -Path WSMan:\localhost\Client\AllowUnencrypted -Value $true -Force

          # Create PowerShell session with retry logic and explicit authentication
          Write-Host "Creating PowerShell session..."
          $maxRetries = 3
          $retryCount = 0
          $Session = $null
          while ($retryCount -lt $maxRetries -and $null -eq $Session) {
            try {
              $Session = New-PSSession -ComputerName $RdpHost -Port $RdpPort -Credential $Credential -Authentication Basic -UseSSL:$false -SessionOption (New-PSSessionOption -SkipCACheck -SkipCNCheck -OperationTimeout 300000) -ErrorAction Stop
              Write-Host "PowerShell session created successfully."
            } catch {
              Write-Host "Attempt $($retryCount + 1) of $maxRetries failed: $($_.Exception.Message)"
              $retryCount++
              if ($retryCount -eq $maxRetries) {
                Write-Error "Failed to create PowerShell session after $maxRetries attempts. Please check WinRM configuration on $RdpHost."
                exit 1
              }
              Start-Sleep -Seconds 5
            }
          }

          # Stop the running application
          Write-Host "Stopping dotnet.exe..."
          Invoke-Command -Session $Session -ScriptBlock {
            try {
              taskkill /IM dotnet.exe /F 2>$null
            } catch {
              # Ignore errors
            }
          }

          # Zip the publish folder
          Write-Host "Zipping publish folder..."
          Compress-Archive -Path "publish\*" -DestinationPath "publish.zip" -Force

          # Copy the zip file to RDP server
          Write-Host "Copying zip file to RDP server..."
          Copy-Item -Path "publish.zip" -Destination "C:\AI-Doctor\publish.zip" -ToSession $Session -Force

          # Unzip on the RDP server and remove the zip file
          Write-Host "Unzipping on RDP server..."
          Invoke-Command -Session $Session -ScriptBlock {
            Expand-Archive -Path "C:\AI-Doctor\publish.zip" -DestinationPath "C:\AI-Doctor\publish" -Force
            Remove-Item "C:\AI-Doctor\publish.zip"
          }

          # Set the connection string as an environment variable on the RDP machine
          Write-Host "Setting connection string environment variable on RDP..."
          Invoke-Command -Session $Session -ScriptBlock {
            param($connString)
            [System.Environment]::SetEnvironmentVariable("ConnectionStrings__DefaultConnection", $connString, "Machine")
          } -ArgumentList $env:ConnectionStrings__DefaultConnection

          # Install EF Core tools on the RDP machine
          Write-Host "Installing EF Core tools on RDP..."
          Invoke-Command -Session $Session -ScriptBlock {
          & dotnet tool install --global dotnet-ef --version 9.0.4
          $env:PATH += ";C:\Users\$env:USERNAME\.dotnet\tools"
          }

          # Run database migrations using published assemblies
          Write-Host "Running database migrations..."
          Invoke-Command -Session $Session -ScriptBlock {
            Set-Location -Path "C:\AI-Doctor\publish"
            & dotnet ef database update --assembly AIDoctor.Infrastructure.dll --startup-assembly AIDoctor.Server.dll
          }

          # Start the application with verification
          Write-Host "Starting the application..."
          Invoke-Command -Session $Session -ScriptBlock {
            Start-Process -FilePath "dotnet" -ArgumentList "C:\AI-Doctor\publish\AIDoctor.Server.dll --urls http://[::]:5001" -NoNewWindow
            Start-Sleep -Seconds 10
            if (Test-NetConnection -ComputerName localhost -Port 5001) {
              Write-Host "Application started on port 5001"
            } else {
              Write-Error "Application failed to start on port 5001"
              exit 1
            }
          }

          # Schedule a restart of the RDP machine with a delay
          Write-Host "Scheduling RDP machine restart..."
          Invoke-Command -Session $Session -ScriptBlock {
            shutdown /r /t 30 /c "Restarting RDP machine after deployment to ensure services start correctly."
            Write-Host "RDP machine will restart in 30 seconds."
          }

          # Close the session before the restart
          Write-Host "Closing session..."
          Remove-PSSession $Session
        shell: powershell
