name: Deploying AI Doctor to RDP (VPS Own Server/Machine)

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Build Backend
        run: |
          cd AIDoctor.Server
          dotnet publish -c Release -o ../publish

      - name: Build Frontend
        run: |
          cd AIDoctor.Client
          npm install
          npm audit fix
          npm run build
          xcopy dist ..\publish\wwwroot /E /H /C /I /Y

      - name: Deploy to RDP
        timeout-minutes: 15
        run: |
          $RdpHost = "139.185.55.205"
          $RdpPort = 5985  # Changed from 5986 to match WinRM listener
          $RdpUser = "Aaban"
          $RdpPass = "${{ secrets.RDP_PASSWORD }}"
          $SecurePass = ConvertTo-SecureString $RdpPass -AsPlainText -Force
          $Credential = New-Object System.Management.Automation.PSCredential($RdpUser, $SecurePass)

          # Add the RDP host to TrustedHosts
          Write-Host "Configuring TrustedHosts..."
          $CurrentTrustedHosts = (Get-Item WSMan:\localhost\Client\TrustedHosts).Value
          if ($CurrentTrustedHosts -notlike "*$RdpHost*") {
            if ($CurrentTrustedHosts) {
              Set-Item WSMan:\localhost\Client\TrustedHosts -Value "$CurrentTrustedHosts,$RdpHost" -Force
            } else {
              Set-Item WSMan:\localhost\Client\TrustedHosts -Value $RdpHost -Force
            }
          }
          Set-Item -Path WSMan:\localhost\Client\AllowUnencrypted -Value $true -Force

          # Create PowerShell session with retry logic
          Write-Host "Creating PowerShell session..."
          $maxRetries = 3
          $retryCount = 0
          $Session = $null
          while ($retryCount -lt $maxRetries -and $null -eq $Session) {
            try {
              $Session = New-PSSession -ComputerName $RdpHost -Port $RdpPort -Credential $Credential -Authentication Basic -SessionOption (New-PSSessionOption -OperationTimeout 300000) -ErrorAction Stop
              Write-Host "PowerShell session created successfully."
            } catch {
              Write-Host "Attempt $($retryCount + 1) of $maxRetries failed: $($_.Exception.Message)"
              $retryCount++
              if ($retryCount -eq $maxRetries) {
                Write-Error "Failed to create PowerShell session after $maxRetries attempts."
                exit 1
              }
              Start-Sleep -Seconds 5
            }
          }

          # Validate session before proceeding
          Write-Host "Validating session..."
          Invoke-Command -Session $Session -ScriptBlock { $env:COMPUTERNAME } -ErrorAction Stop | Out-Null
          Write-Host "Session validated."

          # Cleaning up publish folder before deployment
          Write-Host "Cleaning up publish folder before deployment..."
          Invoke-Command -Session $Session -ScriptBlock {
            if (Test-Path "C:\AI-Doctor\publish") {
              Get-Process | Where-Object { $_.Path -like "*C:\AI-Doctor\publish*" } | Stop-Process -Force -ErrorAction SilentlyContinue
              Remove-Item -Path "C:\AI-Doctor\publish" -Recurse -Force -ErrorAction SilentlyContinue
              Start-Sleep -Seconds 2
            }
          }

          # Stopping dotnet.exe and frpc.exe processes
          Write-Host "Stopping dotnet.exe and frpc.exe processes..."
          Invoke-Command -Session $Session -ScriptBlock {
            Get-Process -Name "dotnet", "frpc" -ErrorAction SilentlyContinue | ForEach-Object {
              Stop-Process -Id $_.Id -Force -ErrorAction SilentlyContinue
              Write-Host "Stopped process ID $($_.Id) - $($_.Name)"
            }
            Start-Sleep -Seconds 5
          }

          # Checking and freeing ports 5001 and 7000
          Write-Host "Checking and freeing ports 5001 and 7000..."
          Invoke-Command -Session $Session -ScriptBlock {
            $ports = 5001, 7000
            foreach ($port in $ports) {
              $portInUse = netstat -aon | Select-String ":$port\s+.*LISTENING"
              if ($portInUse) {
                Write-Host "Port $port is in use. Attempting to free it..."
                $processId = ($portInUse -split "\s+")[5]
                if ($processId) {
                  taskkill /PID $processId /F 2>$null
                  Write-Host "Killed process ID $processId using port $port."
                  Start-Sleep -Seconds 2
                }
              } else {
                Write-Host "Port $port is free."
              }
            }
          }

          # Restarting FRP client
          Write-Host "Restarting FRP client..."
          Invoke-Command -Session $Session -ScriptBlock {
            $frpcPath = "C:\AI-Doctor-App\frpc.exe"
            if (Test-Path $frpcPath) {
              taskkill /IM frpc.exe /F 2>$null
              Start-Sleep -Seconds 2
              Start-Process -FilePath $frpcPath -ArgumentList "-c C:\AI-Doctor-App\frpc.ini" -NoNewWindow
              Write-Host "FRP client restarted."
            } else {
              Write-Host "FRP client not found at $frpcPath. Skipping restart."
            }
          }

          # Zipping publish folder
          Write-Host "Zipping publish folder..."
          Compress-Archive -Path "publish\*" -DestinationPath "publish.zip" -Force

          # Copying zip file to RDP server
          Write-Host "Copying zip file to RDP server..."
          Copy-Item -Path "publish.zip" -Destination "C:\AI-Doctor\publish.zip" -ToSession $Session -Force

          # Unzipping on RDP server and removing the zip file
          Write-Host "Unzipping on RDP server..."
          Invoke-Command -Session $Session -ScriptBlock {
            Expand-Archive -Path "C:\AI-Doctor\publish.zip" -DestinationPath "C:\AI-Doctor\publish" -Force
            Remove-Item "C:\AI-Doctor\publish.zip"
          }

          # Starting the application
          Write-Host "Starting the application..."
          Invoke-Command -Session $Session -ScriptBlock {
            Start-Process -FilePath "dotnet" -ArgumentList "C:\AI-Doctor\publish\AIDoctor.Server.dll --urls http://[::]:5001" -NoNewWindow
          }

          # Verifying app is running on localhost:5001
          Write-Host "Verifying app is running on localhost:5001..."
          Invoke-Command -Session $Session -ScriptBlock {
            $appUrl = "http://localhost:5001"
            $maxAttempts = 10
            $attempt = 1
            while ($attempt -le $maxAttempts) {
              try {
                $response = Invoke-WebRequest -Uri $appUrl -TimeoutSec 5 -ErrorAction Stop
                Write-Host "App is running on $appUrl with status code $($response.StatusCode)"
                break
              } catch {
                Write-Host "Attempt ${attempt} of ${maxAttempts} - Failed to connect to $appUrl - $($_.Exception.Message)"
                if ($attempt -eq $maxAttempts) {
                  Write-Host "App failed to start on $appUrl after $maxAttempts attempts"
                  exit 1
                }
                Start-Sleep -Seconds 3
                $attempt++
              }
            }
          }

          # Closing session
          Write-Host "Closing session..."
          Remove-PSSession $Session
        shell: powershell
