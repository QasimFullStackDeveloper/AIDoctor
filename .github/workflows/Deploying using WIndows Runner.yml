name: Deploying AI Doctor to RDP (VPS Own Server/Machine)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Build Backend
        run: |
          cd AIDoctor.Server
          dotnet publish -c Release -o ../publish

      - name: Build Frontend
        run: |
          cd AIDoctor.Client
          npm ci
          npm run build
          # PowerShell copy instead of xcopy
          Copy-Item -Path "dist/*" -Destination "../publish/wwwroot" -Recurse -Force

      - name: Deploy to RDP
        timeout-minutes: 8
        shell: powershell
        env:
          RDP_HOST: "139.185.55.205"
          RDP_PORT: "5986"
          RDP_USER: "Aaban"
          RDP_PASS: "${{ secrets.RDP_PASSWORD }}"
        run: |
          Write-Output "Starting deployment to RDP machine at $env:RDP_HOST..."

          # Set up credentials
          $SecurePass = ConvertTo-SecureString $env:RDP_PASS -AsPlainText -Force
          $Credential = New-Object System.Management.Automation.PSCredential($env:RDP_USER, $SecurePass)

          # Configure TrustedHosts
          Write-Output "Configuring TrustedHosts..."
          $trustedHosts = (Get-Item WSMan:\localhost\Client\TrustedHosts).Value
          if ($trustedHosts -notlike "*$env:RDP_HOST*") {
              Set-Item WSMan:\localhost\Client\TrustedHosts -Value "$trustedHosts,$env:RDP_HOST" -Force
          }

          # Create publish.zip
          Write-Output "Compressing publish folder..."
          Compress-Archive -Path "publish" -DestinationPath "publish.zip" -Force

          # Establish session with retries
          $sessionParams = @{
              ComputerName  = $env:RDP_HOST
              Port          = $env:RDP_PORT
              Credential    = $Credential
              Authentication = 'Basic'
              SessionOption = New-PSSessionOption -OperationTimeout (180 * 1000)
          }

          $Session = $null
          1..3 | ForEach-Object {
              try {
                  $Session = New-PSSession @sessionParams -ErrorAction Stop
                  break
              } catch {
                  Write-Output "Attempt $_ failed: $($_.Exception.Message)"
                  if ($_ -eq 3) { throw }
                  Start-Sleep -Seconds 10
              }
          }

          # Deployment operations
          Invoke-Command -Session $Session -ScriptBlock {
              # Stop existing processes
              Get-Process -Name "dotnet" -ErrorAction SilentlyContinue | 
                  Where-Object { $_.Path -like "*AIDoctor*" } | 
                  Stop-Process -Force

              # Clean deployment directory
              $deployPath = "C:\AI-Doctor\publish"
              if (Test-Path $deployPath) {
                  Remove-Item $deployPath -Recurse -Force -ErrorAction Stop
              }
          }

          # Copy files
          Copy-Item -Path "publish.zip" -Destination "C:\AI-Doctor\publish.zip" -ToSession $Session -Force

          Invoke-Command -Session $Session -ScriptBlock {
              Expand-Archive -Path "C:\AI-Doctor\publish.zip" -DestinationPath "C:\AI-Doctor\publish" -Force
              Remove-Item -Path "C:\AI-Doctor\publish.zip" -Force
          }

          # Start application
          Invoke-Command -Session $Session -ScriptBlock {
              $logDir = "C:\AI-Doctor\logs"
              New-Item -Path $logDir -ItemType Directory -Force | Out-Null
              
              Start-Process dotnet -ArgumentList "C:\AI-Doctor\publish\AIDoctor.Server.dll --urls http://0.0.0.0:5001" -WorkingDirectory "C:\AI-Doctor\publish" -RedirectStandardOutput "$logDir\output.log" -RedirectStandardError "$logDir\error.log"
          }

          # Verify deployment
          Invoke-Command -Session $Session -ScriptBlock {
              $response = $null
              1..10 | ForEach-Object {
                  try {
                      $response = Invoke-WebRequest "http://localhost:5001" -TimeoutSec 5
                      break
                  } catch {
                      Write-Output "Check $_ failed: $($_.Exception.Message)"
                      Start-Sleep -Seconds 5
                  }
              }
              if (-not $response) { throw "Application failed to start" }
          }

          Remove-PSSession $Session

      - name: Verify Public Access
        shell: powershell
        run: |
          # Verify through your FRP endpoint
          $response = Invoke-WebRequest "http://139.185.55.205:8080" -UseBasicParsing
          if ($response.StatusCode -ne 200) { throw "Deployment verification failed" }
