name: Deploying AI Doctor to RDP (VPS Own Server/Machine)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Build Backend
      run: |
        cd AIDoctor.Server
        dotnet publish -c Release -o ../publish

    - name: Build Frontend
      run: |
        cd AIDoctor.Client
        npm install
        npm audit fix
        npm run build
        xcopy dist ..\publish\wwwroot /E /H /C /I /Y

    - name: Deploy to RDP
      shell: pwsh
      timeout-minutes: 10
      env:
        RDP_HOST: "139.185.55.205"
        RDP_PORT: "5986"
        RDP_USER: "Aaban"
        RDP_PASS: "${{ secrets.RDP_PASSWORD }}"
      run: |
        $ErrorActionPreference = "Stop"

        Write-Host "Zipping publish folder..."
        Compress-Archive -Path "publish/*" -DestinationPath "publish.zip" -Force

        Write-Host "Preparing plain-text credentials..."
        $username = $env:RDP_USER
        $password = $env:RDP_PASS
        $secpasswd = ConvertTo-SecureString $password -AsPlainText -Force
        $cred = New-Object System.Management.Automation.PSCredential($username, $secpasswd)

        Write-Host "Enabling WinRM and configuring trusted hosts..."
        Set-Item WSMan:\localhost\Client\TrustedHosts -Value "$env:RDP_HOST" -Force
        Set-Item WSMan:\localhost\Client\AllowUnencrypted -Value $true -Force

        Write-Host "Establishing session to RDP..."
        $session = New-PSSession -ComputerName $env:RDP_HOST -Port $env:RDP_PORT -Credential $cred -Authentication Basic -UseSSL

        Write-Host "Stopping any running instance of the app..."
        Invoke-Command -Session $session -ScriptBlock {
          Get-Process -Name "dotnet" -ErrorAction SilentlyContinue | ForEach-Object { Stop-Process -Id $_.Id -Force }
          Start-Sleep -Seconds 3
        }

        Write-Host "Removing old publish folder if exists..."
        Invoke-Command -Session $session -ScriptBlock {
          if (Test-Path "C:\AI-Doctor\publish") {
            Remove-Item -Path "C:\AI-Doctor\publish" -Recurse -Force
          }
        }

        Write-Host "Copying new zip to RDP..."
        Copy-Item -Path "publish.zip" -Destination "C:\AI-Doctor\publish.zip" -ToSession $session -Force

        Write-Host "Extracting app on RDP..."
        Invoke-Command -Session $session -ScriptBlock {
          Expand-Archive -Path "C:\AI-Doctor\publish.zip" -DestinationPath "C:\AI-Doctor\publish" -Force
          Remove-Item "C:\AI-Doctor\publish.zip" -Force
        }

        Write-Host "Starting the application..."
        Invoke-Command -Session $session -ScriptBlock {
          $dllPath = "C:\AI-Doctor\publish\AIDoctor.Server.dll"
          if (-not (Test-Path $dllPath)) {
            Write-Error "DLL not found at $dllPath"
            exit 1
          }

          $logDir = "C:\AI-Doctor\logs"
          if (-not (Test-Path $logDir)) {
            New-Item $logDir -ItemType Directory -Force
          }

          $ts = Get-Date -Format "yyyyMMdd-HHmmss"
          $logOut = "$logDir\app-$ts-out.log"
          $logErr = "$logDir\app-$ts-err.log"

          Start-Process "dotnet" -ArgumentList "$dllPath --urls http://0.0.0.0:5001" `
            -WorkingDirectory "C:\AI-Doctor\publish" `
            -RedirectStandardOutput $logOut `
            -RedirectStandardError $logErr `
            -NoNewWindow
        }

        Write-Host "Waiting for app to be available..."
        $maxRetries = 10
        $url = "http://$env:RDP_HOST:5001"
        for ($i = 1; $i -le $maxRetries; $i++) {
          try {
            $response = Invoke-WebRequest -Uri $url -TimeoutSec 5
            Write-Host "App is running with status code: $($response.StatusCode)"
            break
          } catch {
            Write-Host "Attempt $i: App not responding yet."
            Start-Sleep -Seconds 6
            if ($i -eq $maxRetries) {
              Write-Error "App failed to respond after $maxRetries attempts."
              exit 1
            }
          }
        }

        Write-Host "Deployment successful."
