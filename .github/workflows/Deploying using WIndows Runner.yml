name: Deploying AI Doctor to RDP (VPS Own Server/Machine)

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Build Backend
        run: |
          cd AIDoctor.Server
          dotnet publish -c Release -o ../publish

      - name: Build Frontend
        run: |
          cd AIDoctor.Client
          npm install
          npm audit fix
          npm run build
          xcopy dist ..\publish\wwwroot /E /H /C /I /Y

      - name: Deploy to RDP
        timeout-minutes: 15
        run: |
          $RdpHost = "139.185.55.205"
          $RdpPort = 5986
          $RdpUser = "Aaban"
          $RdpPass = "${{ secrets.RDP_PASSWORD }}"
          $SecurePass = ConvertTo-SecureString $RdpPass -AsPlainText -Force
          $Credential = New-Object System.Management.Automation.PSCredential($RdpUser, $SecurePass)

          # Add the RDP host to TrustedHosts
          $CurrentTrustedHosts = (Get-Item WSMan:\localhost\Client\TrustedHosts).Value
          if ($CurrentTrustedHosts -notlike "*$RdpHost*") {
            if ($CurrentTrustedHosts) {
              Set-Item WSMan:\localhost\Client\TrustedHosts -Value "$CurrentTrustedHosts,$RdpHost" -Force
            } else {
              Set-Item WSMan:\localhost\Client\TrustedHosts -Value $RdpHost -Force
            }
          }
          Set-Item -Path WSMan:\localhost\Client\AllowUnencrypted -Value $true -Force

          # Create PowerShell session
          Write-Host "Creating PowerShell session..."
          $Session = New-PSSession -ComputerName $RdpHost -Port $RdpPort -Credential $Credential -Authentication Basic

          # Stop the running application
          Write-Host "Stopping dotnet.exe..."
          Invoke-Command -Session $Session -ScriptBlock {
            try {
              taskkill /IM dotnet.exe /F 2>$null
            } catch {
              # Ignore errors
            }
          }

          # Zip the publish folder
          Write-Host "Zipping publish folder..."
          Compress-Archive -Path "publish\*" -DestinationPath "publish.zip" -Force

          # Copy the zip file to RDP server
          Write-Host "Copying zip file to RDP server..."
          Copy-Item -Path "publish.zip" -Destination "C:\AI-Doctor\publish.zip" -ToSession $Session -Force

          # Unzip on the RDP server and remove the zip file
          Write-Host "Unzipping on RDP server..."
          Invoke-Command -Session $Session -ScriptBlock {
            Expand-Archive -Path "C:\AI-Doctor\publish.zip" -DestinationPath "C:\AI-Doctor\publish" -Force
            Remove-Item "C:\AI-Doctor\publish.zip"
          }

          # Start the application
          Write-Host "Starting the application..."
          Invoke-Command -Session $Session -ScriptBlock {
            Start-Process -FilePath "dotnet" -ArgumentList "C:\AI-Doctor\publish\AIDoctor.Server.dll --urls http://[::]:5001" -NoNewWindow
          }

          # Reboot the RDP machine
          Write-Host "Initiating reboot of RDP machine..."
          Invoke-Command -Session $Session -ScriptBlock {
            shutdown /r /t 30 /c "Rebooting for deployment stability" /f
          }
          Start-Sleep -Seconds 60  # Wait for reboot to start

          # Close the session (will fail after reboot, which is expected)
          Write-Host "Closing session..."
          Remove-PSSession $Session -ErrorAction SilentlyContinue

        shell: powershell
