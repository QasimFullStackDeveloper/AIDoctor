name: Deploying AI Doctor to RDP (VPS Own Server/Machine)

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Build Backend
        run: |
          cd AIDoctor.Server
          dotnet publish -c Release -o ../publish

      - name: Build Frontend
        run: |
          cd AIDoctor.Client
          npm install
          npm audit fix
          npm run build
          xcopy dist ..\publish\wwwroot /E /H /C /I /Y

      - name: Deploy to RDP
        timeout-minutes: 10  # Fail after 10 minutes if stuck
        run: |
          $RdpHost = "139.185.55.205"
          $RdpPort = 5986
          $RdpUser = "Aaban"
          $RdpPass = "${{ secrets.RDP_PASSWORD }}"
          $SecurePass = ConvertTo-SecureString $RdpPass -AsPlainText -Force
          $Credential = New-Object System.Management.Automation.PSCredential($RdpUser, $SecurePass)

          # Add the RDP host to TrustedHosts on the runner
          Write-Output "Configuring TrustedHosts..."
          $CurrentTrustedHosts = (Get-Item WSMan:\localhost\Client\TrustedHosts).Value
          if ($CurrentTrustedHosts -notlike "*$RdpHost*") {
            if ($CurrentTrustedHosts) {
              Set-Item WSMan:\localhost\Client\TrustedHosts -Value "$CurrentTrustedHosts,$RdpHost" -Force
            } else {
              Set-Item WSMan:\localhost\Client\TrustedHosts -Value $RdpHost -Force
            }
          }

          # Allow unencrypted traffic on the client (GitHub Actions runner)
          Write-Output "Allowing unencrypted WinRM traffic..."
          Set-Item -Path WSMan:\localhost\Client\AllowUnencrypted -Value $true -Force

          # Zip the publish folder to reduce transfer size
          Write-Output "Zipping the publish folder..."
          Compress-Archive -Path "publish/*" -DestinationPath "publish.zip" -Force

          # Create a new PowerShell session to the RDP machine using Basic authentication
          Write-Output "Establishing WinRM session..."
          $Session = New-PSSession -ComputerName $RdpHost -Port $RdpPort -Credential $Credential -Authentication Basic -SessionOption (New-PSSessionOption -OperationTimeout 60000)

          # Stop the running application before copying files
          Write-Output "Stopping the running app..."
          Invoke-Command -Session $Session -ScriptBlock {
            $process = Get-Process -Name "dotnet" -ErrorAction SilentlyContinue | Where-Object { $_.Path -like "*AIDoctor*" }
            if ($process) {
              Stop-Process -Id $process.Id -Force
              Write-Output "App stopped successfully."
            } else {
              Write-Output "No running app found."
            }
          }

          # Copy the zip file to RDP
          Write-Output "Copying the zip file to RDP..."
          Copy-Item -Path "publish.zip" -Destination "C:\AI-Doctor\publish.zip" -ToSession $Session -Force

          # Unzip the files on the RDP machine
          Write-Output "Unzipping files on RDP..."
          Invoke-Command -Session $Session -ScriptBlock {
            Remove-Item -Path "C:\AI-Doctor\publish" -Recurse -Force -ErrorAction SilentlyContinue
            Expand-Archive -Path "C:\AI-Doctor\publish.zip" -DestinationPath "C:\AI-Doctor\publish" -Force
            Remove-Item -Path "C:\AI-Doctor\publish.zip" -Force
          }

          # Start the app on port 8080
          Write-Output "Starting the app on port 8080..."
          Invoke-Command -Session $Session -ScriptBlock {
            Start-Process -FilePath "dotnet" -ArgumentList "C:\AI-Doctor\publish\AIDoctor.Server.dll --urls http://0.0.0.0:8080" -WorkingDirectory "C:\AI-Doctor\publish" -NoNewWindow
          }

          # Close the session
          Write-Output "Closing WinRM session..."
          Remove-PSSession $Session
          Write-Output "Deployment complete."
        shell: powershell

      - name: Verify Deployment
        run: |
          # Wait for the app to start
          Start-Sleep -Seconds 10
          # Test the app endpoint
          $url = "http://139.185.55.205:8080"
          $response = Invoke-WebRequest -Uri $url -UseBasicParsing
          if ($response.StatusCode -eq 200) {
            Write-Output "Deployment successful: App is running at $url"
          } else {
            Write-Error "Deployment failed: App not responding at $url"
            exit 1
          }
        shell: powershell
